- name: Update apt packages | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.0 Update apt packages if it is older than cache_valid_time
  apt:
    #upgrade: yes
    update_cache: yes
    cache_valid_time: 3600 #One hour
  register: update_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.1 Print update status
  debug:
    var: update_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.0 Check middleware update list
  command:  apt list --upgradable
  register: list_upgradable_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Print middleware update list
  debug:
    var: list_upgradable_state.stdout_lines
  #register: upgr_lines

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Add packages list
  set_fact:
    packages_list: "{{list_upgradable_state.stdout_lines}}"
  register: upgr_lines

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 Add k/v 1
  set_fact:
    imported_var: "{{ upgr_lines.ansible_facts | default({}) | combine({'instance_id': '11111'}) }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2.1 Add k/v 2
  set_fact:
    imported_var_new: "{{ imported_var | combine({'instance_ad': '3333'}) }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Add item head
  copy:
    content: "{{ imported_var_new  | to_nice_json}}"
    dest: '{{ json_output_file }}'
    remote_src: yes

- name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.4 Convert lines to dict
  lineinfile:
    dest: '{{ json_output_file}}'
    state: absent
    regexp: 'Listing...'
  loop: "{{ imported_var_new.packages_list }}"

# - name: Import Module Slurp | {{ansible_distribution}} {{ansible_distribution_major_version}} | IMP. Slurp
#   include_tasks:
#     file: slurp.yml
#
# - name: Debug 1
#   debug:
#     msg: "{{ remote_content }}"

# - name: Create and Add items to dictionary
#   set_fact:
#     userdata: "{{ imported_var_new.packages_list | default({}) | combine ({ 'paquete' : item.split('/')[0] }) }}"

- name: tsting
  set_fact:
    newlist: "{{ imported_var_new.packages_list | regex_replace(item.regex, item.replace) }}"
  loop:
    - {regex: "//", replace: "#"}
    - {regex: "amd64", replace: "#"}
    - {regex: "\\[", replace: "#"}

- name:
  debug:
    msg: "{{ newlist | to_nice_json}}"

- name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
  lineinfile:
    path: '{{ json_output_file}}'
    state: present
    line: '{"package": "{{ item.split('#') }}", "actual_version": "tes", "upgradable_version": "3" }'
  loop: "{{ newlist }}"

- name: Print
  debug:
    msg: '{{ json_output_file}}'


# - name: Transform lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
#   replace :
#     path: '{{ json_output_file}}'
#     regexp: '/'
#     replace: ';'
#   loop: "{{ remote_content.packages_list}}"
#
# - name: Import Module Slurp | {{ansible_distribution}} {{ansible_distribution_major_version}} | IMP. Slurp
#   include_tasks:
#     file: slurp.yml
#
# - name: Task | 1.5
#   debug:
#     msg: "{{ remote_content.packages_list }}"

            # - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6 Convert lines to dict
            #   lineinfile:
            #     dest: '{{ json_output_file}}'
            #     state: present
            #     regexp: ';'
            #     line: "\t{{ dict(keys_list_two | zip( item.split(';'))) }}, "
            #   loop: "{{ remote_content.packages_list}}"
            #
            # - name: Import Module Slurp | {{ansible_distribution}} {{ansible_distribution_major_version}} | IMP. Slurp
            #   include_tasks:
            #     file: slurp.yml
            #
            # - name: Task | 1.7
            #   debug:
            #     msg: "{{ remote_content.packages_list }}"


# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
#   lineinfile:
#     dest: '{{ json_output_file}}'
#     state: present
#     regexp: 'all'
#     line: "\t{{ dict(keys_list_two | zip( item.split('all'))) }}, "
#   loop: "{{ remote_content.packages_list }}"

#
#
#
# - name: Replace Single Quotes with Double | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.7 Replace Single Quotes with Double
#   replace:
#     path: '{{ json_output_file }}'
#     regexp: "'"
#     replace: '"'



























#
# - name: Slurp
#   include_tasks:
#     file: slurp.yml

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6 Add item head
#   copy:
#     content: "{{ remote_content | to_nice_json}}"
#     dest: '{{ json_output_file }}'
#     remote_src: yes


# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6 Add item head
#   copy:
#     content: "{{ remote_content | to_nice_json}}"
#     dest: '{{ json_output_file }}'
#     remote_src: yes

# - name: Delete 'Listing' | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.7 Delete Listing
#   lineinfile:
#     dest: '{{ json_output_file }}'
#     state: absent
#     regexp: 'Listing...'
#
# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.8 Convert lines to dict
#   lineinfile:
#     dest: '{{ json_output_file}}'
#     state: present
#     regexp: '/'
#     line: "\t{{ dict(keys_list | zip( item.split('/'))) }}, "
#   loop: "{{ imported_var_new.packages_list }}"

# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.9 Convert lines to dict
#   lineinfile:
#     dest: '{{ json_output_file}}'
#     state: absent
#     regexp: 'Listing...'
#   loop: "{{ imported_var_new.packages_list }}"


# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.7 Convert lines to dict
#   lineinfile:
#     path: '{{ json_output_file}}'
#     state: present
#     regexp: '/'
#     line: "\t{{ dict(keys_list | zip( item.split('/'))) }}, "
#   loop: "{{ imported_var_new.packages_list }}"








# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.7 Convert lines to dict
#   lineinfile:
#     path: '{{ json_output_file}}'
#     state: present
#     regexp: '/'
#     line: "\t{{ dict(keys_list | zip( item.split('/'))) }}, "
#   loop: "{{ json_output_file. | to_nice_json }}"

# - name: DELETE Listing on variable
#   debug:
#     msg: "{{ imported_var | regex_replace('Listing....', '') }}"
#   register: new_variable


# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6 Add item head
#   copy:
#     content: "{{ imported_var | regex_replace('Listing....', '') | to_nice_json }}"
#     dest: '{{ json_output_file }}'
#     remote_src: yes












  #loop: "{{ imported_var.packages_list }}"

# - name: load var from file
#   Slurp:
#     src: '{{ json_output_file }}'
#   register: imported_var_json

# - name: Print imported_var_json
#   debug:
#     msg: "{{ imported_var_json|b64decode|from_json }}"

# - name: PRINT ALL FACTS
#   debug:
#     var: ansible_facts
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Update middleware list
#   debug:
#     msg: "{{ list_upgradable_state.stdout | type_debug }}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 print
#   debug:
#     msg: "{{ list_upgradable_state.stdout}}"

# - name: write JSON to a file
#   copy:
#     content: "{{ list_upgradable_state.stdout_lines | to_nice_json }}"
#     dest:'{{json_output_file}}'
#comentario
# - name: write JSON to a file middleware
#   copy:
#     content: "{{ item.split('/') | to_nice_json }}"
#     dest: /tmp/middleware.json
#   with_items:
#     - "{{list_upgradable_state.stdout_lines}}"


# - name: write JSON to a file
#   copy:
#     content: "{{ item.split('/') | to_nice_json }}"
#     dest: /tmp/middleware.json
#   with_lines:
#     - "{{list_upgradable_state.stdout_lines}}"
  #cat "./files/lines"
#crear json en base jmespah
#--------------
# - name: create file json
#   copy:
#     content: ""
#     dest: '{{ json_output_file }}'

# - name: Add first packages
#   lineinfile:
#     path: '{{ json_output_file }}'
#     line: "{{ item.split('/') | to_nice_json  }}"
#   loop: "{{ list_upgradable_state.stdout_lines }}"

# - name: Add first packages
#   lineinfile:
#     path: '{{ json_output_file }}'
#     #line: "{{ item.split('/') | to_nice_json  }}"
#     line: "{{ dict('abcdefghi' | zip( item.split('/'))) }}"
#   loop: "{{ list_upgradable_state.stdout_lines }}"

# #----------------
# - name: Delete first line
#   lineinfile:
#     path: '{{ json_output_file }}'
#     state: absent
#     regexp: 'Listing...'


# - name: Create a JSON information
#   set_fact:
#      packages_to_update: "{{ list_upgradable_state | json_query(\"stdout_lines[]\") }}"

# - name: Create a JSON information
#   set_fact:
#      packages_to_update: "{{ list_upgradable_state | json_query(\"stdout_lines[]\") }}"

# - name: Zip names and packages
#   set_fact:
#      pack: "{{ dict('packagues' | zip(packages_to_update)) }}"


# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.4  json
#   set_fact:
#     jsondata1: "{{ item.split('/')}}" #"{{list_upgradable_state.stdout_lines | items2dict }}"
#   with_items:
#     - "{{list_upgradable_state.stdout_lines}}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 print
#   debug:
#     msg: "{{jsondata1}}"

# # - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6  json
# #   set_fact:
# #     jsondata: "{{ jsondata1.split('/') }}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6.º print
#   debug:
#     msg: "{{ jsondata1 | type_debug }}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6.º print
#   debug:
#     msg: "{{jsondata1}}"



  # with_items:
  #   - '{{ list_upgradable_state.stdout_lines | items2dict  | from_json }}'
  # ansible.builtin.debug:
  #   msg: '{{ item }}'
  # loop: '{{ list_upgradable_state.stdout |from_json }}' # | from_yaml_all | list }}
  # debug:
  #   msg: "item"
  # loop: "{{list_upgradable_state | from_json}}"

  #apt:
    #name: {{item.0}}
    #upgrade: yes
  #with_subelements:
    #-  list_upgradable_state
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Check if Update middleware is installed
#   debug:
#     msg: "{{services_state.ansible_facts.services}}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 update packages that are in a lower version to the most current existing one
#   apt:
#     upgrade:yes
#     state: latest
