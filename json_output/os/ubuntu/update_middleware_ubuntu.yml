- name: Update apt packages | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.0 Update apt packages if it is older than cache_valid_time
  apt:
    #upgrade: yes
    update_cache: yes
    cache_valid_time: 3600 #One hour
  register: update_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.1 Print update status
  debug:
    var: update_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.0 Check middleware update list
  command:  apt list --upgradable
  register: list_upgradable_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Print middleware update list
  debug:
    var: list_upgradable_state.stdout_lines

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Update middleware list
  debug:
    msg: "{{ list_upgradable_state.stdout | type_debug }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 print
  debug:
    msg: "{{ list_upgradable_state.stdout}}"

# - name: write JSON to a file
#   copy:
#     content: "{{ list_upgradable_state.stdout_lines | to_nice_json }}"
#     dest: /tmp/somelog.json
#comentario
# - name: write JSON to a file middleware
#   copy:
#     content: "{{ item.split('/') | to_nice_json }}"
#     dest: /tmp/middleware.json
#   with_items:
#     - "{{list_upgradable_state.stdout_lines}}"


# - name: write JSON to a file
#   copy:
#     content: "{{ item.split('/') | to_nice_json }}"
#     dest: /tmp/middleware.json
#   with_lines:
#     - "{{list_upgradable_state.stdout_lines}}"
  #cat "./files/lines"
#crear json en base jmespah

- name: Add first ips
  lineinfile:
    path: /tmp/somelog.json
    line: "{{ item.split('/') | to_nice_json  }}"
    #line: "{{ dict([name , package] | zip({{ item.split('/')}})) }}"
  loop: "{{ list_upgradable_state.stdout_lines}}"

- name: Create a JSON information
  set_fact:
     packages_to_update: "{{ list_upgradable_state | json_query(\"stdout_lines[]\") }}"

- name: Create a JSON information
  set_fact:
     packages_to_update: "{{ list_upgradable_state | json_query(\"stdout_lines[]\") }}"

- name: Zip names and packages
  set_fact:
     pack: "{{ dict('packagues' | zip(packages_to_update)) }}"


- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.4  json
  set_fact:
    jsondata1: "{{ item.split('/')}}" #"{{list_upgradable_state.stdout_lines | items2dict }}"
  with_items:
    - "{{list_upgradable_state.stdout_lines}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 print
  debug:
    msg: "{{jsondata1}}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6  json
#   set_fact:
#     jsondata: "{{ jsondata1.split('/') }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6.ยบ print
  debug:
    msg: "{{ jsondata1 | type_debug }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6.ยบ print
  debug:
    msg: "{{jsondata1}}"



  # with_items:
  #   - '{{ list_upgradable_state.stdout_lines | items2dict  | from_json }}'
  # ansible.builtin.debug:
  #   msg: '{{ item }}'
  # loop: '{{ list_upgradable_state.stdout |from_json }}' # | from_yaml_all | list }}
  # debug:
  #   msg: "item"
  # loop: "{{list_upgradable_state | from_json}}"

  #apt:
    #name: {{item.0}}
    #upgrade: yes
  #with_subelements:
    #-  list_upgradable_state
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Check if Update middleware is installed
#   debug:
#     msg: "{{services_state.ansible_facts.services}}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 update packages that are in a lower version to the most current existing one
#   apt:
#     upgrade:yes
#     state: latest
