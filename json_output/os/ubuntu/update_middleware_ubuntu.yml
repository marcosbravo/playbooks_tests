- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.0 Update apt packages if it is older than cache_valid_time
  apt:
    update_cache: yes
    cache_valid_time: 3600 #One hour
  register: update_state

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.1 Print update status
#   debug:
#     var: update_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.2 Create remote file to store results
  copy:
    content: ""
    dest: "{{ json_output_file }}"
    force: yes

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.3 Create remote file to store New results
  file:
    state: touch
    path: "{{ json_output_file }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.0 Get List Packages Upgradables
  command:  apt list --upgradable
  register: list_upgradable_packages

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Print middleware update list
#   debug:
#     var: list_upgradable_packages.stdout_lines

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 Set variable with packages list content
  set_fact:
    packages_upgradables_list: "{{ list_upgradable_packages.stdout_lines }}"
  register: upgradable_packages

# - name: CONTENIDO
#   debug:
#     msg: "{{ upgradable_packages }}"
#
# - name: TIPO
#   debug:
#     msg: "{{ upgradable_packages | type_debug }}"


- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Get ansible_facts of packages_list
  set_fact:
    upgradable_packages_ansible_facts: "{{upgradable_packages.ansible_facts}}"

# - name:
#   debug:
#     msg: "{{upgradable_packages.ansible_facts}}"
#
# - name:
#   debug:
#     msg: "{{upgradable_packages.ansible_facts | type_debug}}"


# - name: Display LOOP LISTS
#   debug:
#     msg: "{{ item }}"
#   loop: "{{ upgradable_packages.ansible_facts.packages_upgradables_list }}"


- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.4 Fit contents of list of packages upgradables
  set_fact:
    foo_item: "{{ item[:-1] | regex_replace(' ', '#' ) | regex_replace('/', '#' ) }}"
  with_items: "{{ upgradable_packages.ansible_facts.packages_upgradables_list}}"
  register: foo_result
  no_log: true

# - name: PRINT foo_result
#   debug:
#     msg: "{{ foo_result}}"
#
# - name: el tipo de foo_result
#   debug:
#     msg: "{{ foo_result | type_debug }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Get List of contents of list of packages upgradables
  set_fact: packages_list="{{ foo_result.results | map(attribute='ansible_facts.foo_item') | list }}"

# - name: PACKAGEs LIST
#   debug:
#     msg: "{{packages_list}}"
#
# - name: PACKAGEs TYPE
#   debug:
#     msg: "{{packages_list | type_debug}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.6 Remove first unnecesary item on list of packages ('Listing...)
  set_fact:
    packages_list: "{{ packages_list[1:] }}"

# - name: PACKAGEs LIST | elimminado primer item
#   debug:
#     msg: "{{packages_list}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.7.1 Set List elements to include on final list
  set_fact: goo_item="{{item.split('#')[0]+"#"+item.split('#')[1]+"#"+item.split('#')[6]+"#"+item.split('#')[2]}}"
  with_items: "{{ packages_list }}"
  register: packages_list
  no_log: true
# - name: print ONLY keyS
#   debug:
#     msg: "{{ packages_list }}"


- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.7.2 Set List elements to include on final list (map attributes)
  set_fact: packages_list="{{ packages_list.results | map(attribute='ansible_facts.goo_item') | list }}"

# - name: PRINT PACKAGES LIST SELECCION
#   debug:
#     msg: "{{ packages_list }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.8 Set List elements to include on final list (map attributes)
  set_fact:
    nuevodict: '{ "packages_list": "{{ packages_list }}" }'

# - name: NUEVO DICT
#   debug:
#     msg: "{{nuevodict}}"
#
# - name: NUEVO DICT TYPE
#   debug:
#     msg: "{{nuevodict | type_debug}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.9 Create and Add items to dict(key/value) including list of upgradable packages
  set_fact:
    nuevodict: "{{ nuevodict | default({}) | combine ({ 'instance_id' : 'i-99999' }) }}"

# - name: NUEVO DICT TYPE ADD NEW VALUE/KEY
#   debug:
#     msg: "{{nuevodict}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.10 First dump dict to remote file on target host
  lineinfile:
    path: '{{ json_output_file}}'
    state: present
    regexp: '#'
    #line: "\t{{ dict(keys_list | zip( item ))  }} "
    line: "\t{{ dict(keys_list | zip( item.split('#')))  }} "
  #loop: "{{newlist}}"
  loop: "{{ nuevodict.packages_list }}"
  no_log: true

#######################1##################
- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 2.0 Get remote host content (list)
  command:  cat "{{ json_output_file }}"
  register: catcommand

# - name: Tipo de CATCOMMAND
#   debug:
#     msg: "{{ catcommand.stdout_lines }}"
#
# - name: Tipo de catcommand.stdout_lines
#   debug:
#     msg: "{{catcommand.stdout_lines }}"
#
# - name: Tipo de catcommand.stdout_lines
#   debug:
#     msg: "{{catcommand.stdout_lines | type_debug}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 2.1 Fit remote host content (list)
  set_fact:
    hil: "{{catcommand.stdout_lines | replace('\\t', '') | replace ('},', '}') }}"

# - name: PRINT HIL
#   debug:
#     msg: "{{ hil }}"

#####################2#######################

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 2.2 Create dict with key and value (list)
  set_fact:
    nuevodict: "{{ nuevodict | default({}) | combine ({ 'packages_list' : hil}) }}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 3.0 Print json with all contents
  debug:
    msg: "{{ nuevodict }}"


-  name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 3.1 Store json with all contents on remote file
   copy:
    #content: "{{ nuevodict | to_nice_json }} "
    content: "{{ nuevodict | to_nice_json}} "
    dest: "{{ json_output_file }}"
