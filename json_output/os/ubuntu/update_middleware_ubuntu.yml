- name: Update apt packages | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.0 Update apt packages if it is older than cache_valid_time
  apt:
    #upgrade: yes
    update_cache: yes
    cache_valid_time: 3600 #One hour
  register: update_state

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 0.1 Print update status
#   debug:
#     var: update_state

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.0 Get List Packages Upgradables
  command:  apt list --upgradable
  register: list_upgradable_packages

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Print middleware update list
  debug:
    var: list_upgradable_packages.stdout_lines

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 Set variable with packages list content
  set_fact:
    packages_upgradables_list: "{{ list_upgradable_packages.stdout_lines }}"
  register: upgradable_packages

- name: CONTENIDO
  debug:
    msg: "{{ upgradable_packages }}"

- name: TIPO
  debug:
    msg: "{{ upgradable_packages | type_debug }}"

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Clean Upgradable Packages Log Items on List
#   set_fact:
#     upgradable_packages: "{{ upgradable_packages.ansible_facts.packages_upgradables_list | reject('search', 'Listing') | list }}"


- name: obtener el upgradable_packages.ansible_facts
  set_fact:
    upgradable_packages_ansible_facts: "{{upgradable_packages.ansible_facts}}"

- name:
  debug:
    msg: "{{upgradable_packages.ansible_facts}}"

- name:
  debug:
    msg: "{{upgradable_packages.ansible_facts | type_debug}}"


- name: Display LOOP LISTS
  debug:
    msg: "{{ item }}"
  loop: "{{ upgradable_packages.ansible_facts.packages_upgradables_list }}"

# - name: Display LOOP LISTSS
#   set_fact:
#     newvar: "{{ item | regex_replace(' ', '#') }}"
#   with_items: "{{ upgradable_packages.ansible_facts.packages_upgradables_list }}"
#
# - name: Display LOOP LISTSS
#   set_fact:
#     newvar: "{{ item | regex_replace(' ', '' ) }}"
#   with_items: "{{ upgradable_packages.ansible_facts.packages_upgradables_list }}"



- name: set fact
  set_fact: foo_item="{{ item | regex_replace(' ', '#' ) | regex_replace('/', '#' ) }}"
  with_items: "{{ upgradable_packages.ansible_facts.packages_upgradables_list}}"
  register: foo_result

# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Clean Upgradable Packages Log Items on List
#   set_fact:
#     upgradable_packages: "{{ foo_result.packages_upgradables_list | reject('search', 'Listing') | list }}"
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Clean Upgradable Packages Log Items on List
#   debug:
#     msg: "{{upgradable_packages}}"
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Clean Upgradable Packages Log Items on List
#   debug:
#     msg: "{{upgradable_packages| type_debug}}"

# - name: asdfasdfasdf
#   set_fact:
#     new_list: "{{ foo_result | reject('search', 'Listing') | dict }}"
#   register: nueva
#
# - name: make a list
#   set_fact: packages_list="{{ nueva.results | map(attribute='ansible_facts.foo_item') | list }}"
#


- name: el tipo de foo_result
  debug:
    msg: "{{ foo_result | type_debug }}"

- name: make a list
  set_fact: packages_list="{{ foo_result.results | map(attribute='ansible_facts.foo_item') | list }}"

- name: PACKAGEs LIST
  debug:
    msg: "{{packages_list}}"

- name: PACKAGEs TYPE
  debug:
    msg: "{{packages_list | type_debug}}"

- name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Clean Upgradable Packages Log Items on List
  set_fact:
    upgradable_packages_jai: "{{ packages_list | reject('search', 'Listing') | list }}"

- name: CONTENIDO I
  debug:
    msg: "{{ upgradable_packages_jai }}"

- name: CONTENIDO II
  debug:
    msg: "{{ upgradable_packages_jai | type_debug}}"




- name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
  lineinfile:
    path: '{{ json_output_file}}'
    state: present
    regexp: '#'
    line: "\t{{ dict(keys_list | zip( item.split('#'))) }}, "
  loop: "{{ upgradable_packages_jai  }}"


- name: LIST ACTUAL
  debug:
    msg: "{{upgradable_packages.ansible_facts}}"

- name:
  set_fact:
    miracle: [{'package_name': 'apt', 'repository': 'bionic-updates', 'upgradable_version': '1.6.14', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6.13]'},
        {'package_name': 'apt-utils', 'repository': 'bionic-updates', 'upgradable_version': '1.6.14', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6.13]'},
        {'package_name': 'cloud-init', 'repository': 'bionic-updates', 'upgradable_version': '21.2-3-g899bfaa9-0ubuntu2~18.04.1', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '21.1-19-gbad84ad4-0ubuntu1~18.04.1]'},
        {'package_name': 'gzip', 'repository': 'bionic-updates', 'upgradable_version': '1.6-5ubuntu1.1', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6-5ubuntu1]'},
        {'package_name': 'initramfs-tools', 'repository': 'bionic-updates', 'upgradable_version': '0.130ubuntu3.13', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '0.130ubuntu3.11]'},
        {'package_name': 'initramfs-tools-bin', 'repository': 'bionic-updates', 'upgradable_version': '0.130ubuntu3.13', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '0.130ubuntu3.11]'},
        {'package_name': 'initramfs-tools-core', 'repository': 'bionic-updates', 'upgradable_version': '0.130ubuntu3.13', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '0.130ubuntu3.11]'},
        {'package_name': 'libapt-inst2.0', 'repository': 'bionic-updates', 'upgradable_version': '1.6.14', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6.13]'},
        {'package_name': 'libapt-pkg5.0', 'repository': 'bionic-updates', 'upgradable_version': '1.6.14', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6.13]'},
        {'package_name': 'libpam-modules', 'repository': 'bionic-updates', 'upgradable_version': '1.1.8-3.6ubuntu2.18.04.3', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.1.8-3.6ubuntu2.18.04.2]'},
        {'package_name': 'libpam-modules-bin', 'repository': 'bionic-updates', 'upgradable_version': '1.1.8-3.6ubuntu2.18.04.3', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.1.8-3.6ubuntu2.18.04.2]'},
        {'package_name': 'libpam-runtime', 'repository': 'bionic-updates', 'upgradable_version': '1.1.8-3.6ubuntu2.18.04.3', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.1.8-3.6ubuntu2.18.04.2]'},
        {'package_name': 'libpam0g', 'repository': 'bionic-updates', 'upgradable_version': '1.1.8-3.6ubuntu2.18.04.3', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.1.8-3.6ubuntu2.18.04.2]'},
        {'package_name': 'linux-base', 'repository': 'bionic-updates', 'upgradable_version': '4.5ubuntu1.6', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '4.5ubuntu1.2]'},
        {'package_name': 'python-apt-common', 'repository': 'bionic-updates', 'upgradable_version': '1.6.5ubuntu0.6', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6.5ubuntu0.5]'},
        {'package_name': 'python3-apt', 'repository': 'bionic-updates', 'upgradable_version': '1.6.5ubuntu0.6', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1.6.5ubuntu0.5]'},
        {'package_name': 'python3-distupgrade', 'repository': 'bionic-updates', 'upgradable_version': '1:18.04.44', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1:18.04.42]'},
        {'package_name': 'snapd', 'repository': 'bionic-updates', 'upgradable_version': '2.49.2+18.04', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '2.48.3+18.04]'},
        {'package_name': 'sosreport', 'repository': 'bionic-updates', 'upgradable_version': '4.1-1ubuntu0.18.04.3', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '4.1-1ubuntu0.18.04.1]'},
        {'package_name': 'squashfs-tools', 'repository': 'bionic-updates', 'upgradable_version': '1:4.3-6ubuntu0.18.04.2', 'arquitecture': 'amd64', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1:4.3-6ubuntu0.18.04.1]'},
        {'package_name': 'ubuntu-advantage-tools', 'repository': 'bionic-updates', 'upgradable_version': '27.2.2~18.04.1', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '17]'},
        {'package_name': 'ubuntu-release-upgrader-core', 'repository': 'bionic-updates', 'upgradable_version': '1:18.04.44', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '1:18.04.42]'},
        {'package_name': 'update-notifier-common', 'repository': 'bionic-updates', 'upgradable_version': '3.192.1.11', 'arquitecture': 'all', 'is_upgradable': '[upgradable', 'from': 'from:', 'actual_version': '3.192.1.9]'}]

- name: LIST mia
  debug:
    msg: "{{miracle}}"

# - name: tstingB
#   set_fact:
#     newlist: "{{ newlist | regex_replace(' ', '#' )}}"

# - name: tsting2
#   set_fact:
#     newlist: "{{ newlist | regex_replace('amd64', '#' )}}"
#
# - name: tsting3
#   set_fact:
#     newlist: "{{ newlist | regex_replace('/', '#' )}}"
#
# - name: tsting4
#   set_fact:
#     newlist: "{{ newlist | regex_replace('all', '#' )}}"

# - name: IMPRESION NEWLIST!!
#   debug:
#     msg: "{{ newlist }}"
#
# - name:
#   debug:
#     msg: "{{ newlist | type_debug}}"

# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
#   lineinfile:
#     path: '{{ json_output_file}}'
#     state: present
#     regexp: '#'
#     line: "\t{{ dict(keys_list | zip( item.split('#'))) }}, "
#   loop: "{{ newlist }}"


# - name:
#   set_fact:
#     finaldict: {}
#
# - name:
#   set_fact:
#     finaldict: "{{ content.stdout }}"
#
# - name: print
#   debug:
#     msg: "{{ finaldict | type_debug }}"
#
#
# - name: print
#   debug:
#     msg: "{{ finaldict }}"




























  #register: upgr_lines
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.1 Add packages list
#   set_fact:
#     packages_upgradables_list: "{{list_upgradable_state.stdout_lines }}"
#   register: upgr_lines
#
#
# - name: Import Module Slurp | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 IMPORT SLURP
#   include_tasks:
#     file: combine_parameters.yaml
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Add item head
#   copy:
#     content: "{{ imported_var_last  | to_nice_json}}"
#     dest: '{{ json_output_file }}'
#     remote_src: yes
#
# - name: Debug SEGUNDOKEY
#   debug:
#     msg: "{{ imported_var_last }}"
#
# # - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.4 Convert lines to dict
# #   lineinfile:
# #     dest: '{{ json_output_file}}'
# #     state: absent
# #     regexp: 'Listing...'
# #   loop: "{{ imported_var_new.{{ packages_upgradables_list }} }}"
#
# # - name: Import Module Slurp | {{ansible_distribution}} {{ansible_distribution_major_version}} | IMP. Slurp
# #   include_tasks:
# #     file: slurp.yml
# #
# # - name: Debug 1
# #   debug:
# #     msg: "{{ remote_content }}"
#
# # - name: Create and Add items to dictionary
# #   set_fact:
# #     userdata: "{{ imported_var_new.packages_upgradables_list | default({}) | combine ({ 'paquete' : item.split('/')[0] }) }}"
#
#
# # - name: tipo de mi variable "imported_var_new"
# #   debug:
# #     msg: "{{ imported_var_last | type_debug }}"
# #
# # - name: definir
# #   set_fact:
# #     newlist: {}
# #
# # - name: tipo de variable de "newlist" fijado a dict
# #   debug:
# #     msg: "{{ newlist | type_debug }}"
#
# - name: tsting
#   set_fact:
#     newlist: "{{ imported_var_last | regex_replace('from:', '#' )}}"
#
# - name: tsting2
#   set_fact:
#     newlist: "{{ newlist | regex_replace('amd64', '#' )}}"
#
# - name: tsting3
#   set_fact:
#     newlist: "{{ newlist | regex_replace('/', '#' )}}"
#
# - name: tsting4
#   set_fact:
#     newlist: "{{ newlist | regex_replace('all', '#' )}}"
#
# - name: DEBUGEAR
#   debug:
#     msg: "{{ newlist }}"
# ##################################3
# # - name:
# #   set_fact:
# #     apps2: "{{ newlist.packages_upgradables_list[:-1] }}"
#
# - name:
#   set_fact:
#     apps2: "{{ newlist.packages_upgradables_list | reject('search', 'Listing') | list }}"
#
# - name: Debug APPS2
#   debug:
#     msg: "{{ apps2 }}"
#
# - name: Debug APPS2
#   set_fact:
#     apps3: "{{ apps2 }}"
#
# - name: Debug APPS2
#   debug:
#     msg: "{{ apps3 | type_debug }}"
#
# - name: Debug APPS3 Inicial
#   debug:
#     msg: "{{ apps3 }}"
#
# - name: SET Dict APPS4
#   set_fact:
#     apps4: {}
#
# - name: Debug APPS4 Type
#   debug:
#     msg: "{{ apps4 | type_debug }}"
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 Add k/v 1
#   set_fact:
#     apps4: "{{ apps3 }}"
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 Add k/v 1
#   set_fact:
#     apps4: "{{ apps4 | default ({}) | combine({'instance_id': '11111'}) }}"
#
# - name: Debug APPS4
#   debug:
#     msg: "{{ apps4 }}"
# #####################################
#
# - name: Debug SEGUNDOKEY
#   debug:
#     msg: "{{ newlist | type_debug }}"
#
# - name: Import Module Slurp | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.2 IMPORT SLURP
#   include_tasks:
#     file: combine_parameters.yaml
#
# - name: Debug TERCER KEY
#   debug:
#     msg: "{{ newlist }}"
# # - name: poner orden dict
# #   set_fact:
# #     vamosaver: "{{ newlist | dict2items }}"
#
#
# # - name: tipo de mi variable newlist , es dict??
# #   debug:
# #     msg: "{{imported_var_last | type_debug}}"
# #
# # - name: tipo de mi variable newlist FINAL
# #   debug:
# #     msg: "{{imported_var_last}}"
# #
# # - name: set
# #   set_fact:
# #     newlist: "{{ imported_var_last }}"
#
# - name: Update middleware | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.3 Add item head
#   copy:
#     content: "{{ newlist | to_nice_json}}"
#     dest: '{{ json_output_file }}'
#     remote_src: yes
#
#
# - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
#   lineinfile:
#     path: '{{ json_output_file}}'
#     state: present
#     regexp: '#'
#     line: "\t{{ dict(keys_list | zip( item.split('#'))) }}, "
#   loop: "{{ newlist.packages_upgradables_list }}"
# #
# # - name: Convert lines to dict | {{ansible_distribution}} {{ansible_distribution_major_version}} | 1.5 Convert lines to dict
# #   lineinfile:
# #     path: '{{ json_output_file }}'
# #     state: absent
# #     regexp: 'Listing...'
# #   loop: "{{ newlist.packages_upgradables_list }}"
#
#
#
# # - name: Print all available facts
# #   debug:
# #     var: ansible_facts
